// Generated by CoffeeScript 1.6.3
/*
jQuery Age
Copyright 2013 Kevin Sylvestre
1.1.3
*/


(function() {
  "use strict";
  var $, Age,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = jQuery;

  Age = (function() {
    Age.settings = {
      singular: 1,
      interval: 1000,
      suffixes: {
        past: "Hace",
        future: "Dentro de"
      },
      formats: {
        now: "Ahora",
        singular: {
          seconds: "un segundo",
          minutes: "un minuto",
          hours: "una hora",
          days: "un d&iacute;a",
          yesterday : "Ayer a las",
          weeks: "una semana",
          months: "un mes",
          years: "un a&ntilde;o"
        },
        plural: {
          seconds: "{{amount}} segundos",
          minutes: "{{amount}} minutos",
          hours: "{{amount}} horas",
          days: "{{amount}} d&iacute;as",
          weeks: "{{amount}} semanas",
          months: "{{amount}} meses",
          years: "{{amount}} a&ntilde;os"
        }
      }
    };

    function Age($el, settings) {
      if (settings == null) {
        settings = {};
      }
      this.text = __bind(this.text, this);
      this.interval = __bind(this.interval, this);
      this.format = __bind(this.format, this);
      this.unit = __bind(this.unit, this);
      this.amount = __bind(this.amount, this);
      this.formatting = __bind(this.formatting, this);
      this.adjust = __bind(this.adjust, this);
      this.suffix = __bind(this.suffix, this);
      this.date = __bind(this.date, this);
      this.dateTimestamp = __bind(this.dateTimestamp, this);
      this.dateFormat = __bind(this.dateFormat, this);
      this.hour = __bind(this.hour, this);
      this.reformat = __bind(this.reformat, this);
      this.$el = $el;
      this.settings = $.extend({}, Age.settings, settings);
      this.reformat();
    }

    Age.prototype.reformat = function() {
      var interval;
      interval = this.interval();
      this.$el.html(this.text(interval));
      interval = Math.abs(interval);
      if (interval < this.settings.interval) {
        interval = this.settings.interval;
      }
      return setTimeout(this.reformat, interval);
    };

    Age.prototype.date = function() {
      //return new Date(this.$el.attr('datetime') || this.$el.attr('time'));
      
        // Split timestamp into [ Y, M, D, h, m, s ]
        var t = this.$el.attr('datetime').split(/[- :]/);
        
        // Apply each element to the Date function
        if(t.length == 6){
            var d = new Date(t[0], t[1]-1, t[2], t[3], t[4], t[5]);
        }else if(t.length == 3){
            var d = new Date(t[0], t[1]-1, t[2]);
        }
        return d;
    };
    
    Age.prototype.dateTimestamp = function() {
        // Split timestamp into [ Y, M, D, h, m, s ]
        var t = this.$el.attr('date').split(/[- :]/);
        
        // Apply each element to the Date function
        if(t.length == 6){
            var d = new Date(t[0], t[1]-1, t[2], t[3], t[4], t[5]);
        }else if(t.length == 3){
            var d = new Date(t[0], t[1]-1, t[2]);
        }
      return d;
    };
    
    Age.prototype.hour = function() {
        var hour = '';
        var minute = '';
        if(this.date().getHours() < 9){hour = '0' + this.date().getHours();}else{hour = this.date().getHours();}
        if(this.date().getMinutes() < 9){minute = '0' + this.date().getMinutes();}else{minute = this.date().getMinutes();}
      return hour + ':' + minute;
    };
    
    Age.prototype.dateFormat = function() {
        
        var month = this.date().getMonth();
        var x;
        switch (month)
        {
        case 0:
          x="Enero";
          break;
        case 1:
          x="Febrero";
          break;
        case 2:
          x="Marzo";
          break;
        case 3:
          x="Abril";
          break;
        case 4:
          x="Mayo";
          break;
        case 5:
          x="Junio";
          break;
        case 6:
          x="Julio";
          break;
        case 7:
          x="Agosto";
          break;
        case 8:
          x="Septiembre";
          break;
        case 9:
          x="Octubre";
          break;
        case 10:
          x="Noviembre";
          break;
        case 11:
          x="Diciembre";
          break;                                                  
        }         
      return this.date().getDate() + ' de ' + x + ' a la(s) ' + this.hour();
    };    

    Age.prototype.suffix = function(interval) {
      if (interval < 0) {
        return this.settings.suffixes.past;
      }
      if (interval > 0) {
        return this.settings.suffixes.future;
      }
    };

    Age.prototype.adjust = function(interval, scale) {
      return Math.round(Math.abs(interval / scale));
    };

    Age.prototype.formatting = function(interval) {
      return {
        seconds: this.adjust(interval, 1000),
        minutes: this.adjust(interval, 1000 * 60),
        hours: this.adjust(interval, 1000 * 60 * 60),
        days: this.adjust(interval, 1000 * 60 * 60 * 24),
        weeks: this.adjust(interval, 1000 * 60 * 60 * 24 * 7),
        months: this.adjust(interval, 1000 * 60 * 60 * 24 * 30),
        years: this.adjust(interval, 1000 * 60 * 60 * 24 * 365)
      };
    };

    Age.prototype.amount = function(formatting) {
      return formatting.years || formatting.months || formatting.weeks || formatting.days || formatting.hours || formatting.minutes || formatting.seconds || 0;
    };

    Age.prototype.unit = function(formatting) {
      return (formatting.years && "years") || (formatting.months && "months") || (formatting.weeks && "weeks") || (formatting.days && "days") || (formatting.hours && "hours") || (formatting.minutes && "minutes") || (formatting.seconds && "seconds") || void 0;
    };

    Age.prototype.format = function(amount, unit) {
      var _ref;
      return (_ref = this.settings.formats[amount === this.settings.singular ? 'singular' : 'plural']) != null ? _ref[unit] : void 0;
    };

    Age.prototype.interval = function() {
        //new Date(year, month, day, hours, minutes, seconds, milliseconds)
        //return this.date() - new Date; //Antes
        //return this.date() - new Date(2013,8,17,23,38,15);//pasamos la hora del sistema, para que con eso se descuente
      var timestamp_server = this.dateTimestamp();
      return this.date() - timestamp_server;
    };

    Age.prototype.text = function(interval) {
      var amount, format, formatting, suffix, unit;
      if (interval == null) {
        interval = this.interval();
      }
      suffix = this.suffix(interval);
      formatting = this.formatting(interval);
      amount = this.amount(formatting);
      unit = this.unit(formatting);
      format = this.format(amount, unit);
      if (!format) {
        return this.settings.formats.now;
      }
      
      if(unit == "days" && amount == "1"){
        return "" + this.settings.formats.singular.yesterday + " " + this.hour();
      }else if(suffix == "Hace" && ((unit == "days" && amount >= 2) || (unit == "weeks" && amount >= 1) || (unit == "months" && amount >= 1) || (unit == "years" && amount == 1))){
        return this.dateFormat();
      }else{
        return "" + suffix + " " + (format.replace('{{unit}}', unit).replace('{{amount}}', amount));        
      }
    };

    return Age;

  })();

  $.fn.extend({
    age: function(options) {
      if (options == null) {
        options = {};
      }
      return this.each(function() {
        return new Age($(this), options);
      });
    }
  });

}).call(this);
